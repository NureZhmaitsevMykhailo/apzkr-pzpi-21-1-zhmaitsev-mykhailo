Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії

КУРСОВА РОБОТА 
ПОЯСНЮВАЛЬНА ЗАПИСКА
з дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Програмна система призначення та контролю ліків
для онкохворих пацієнтів»

Виконав 	
ст. гр. ПЗПІ-21-1                                                                                         Жмайцев М. О.

Керівник: 
доц. каф. ПІ	         	Лещинський В. О.

Робота захищена на оцінку                                                      	        _______________

Комісія:
доц. каф. ПІ	         	Лещинський В. О.
доц. каф. ПІ	         	    Лещинська І. О.
ст. викл. каф. ПІ	         	       Сокорчук І. П.


	Харків 2024
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук         Кафедра програмної інженерії	      
Спеціальність 121 – Інженерія програмного забезпечення	
Курс           3		 Семестр  			            6				____        
Навчальна дисципліна Архітектура програмного забезпечення	

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТА
Жмайцеву Михайлу Олександровичу
1.	Тема роботи: «Програмна система призначення та контролю ліків для онкохворих пацієнтів»	
2.	Термін узгодження завдання курсової роботи «1» квітня 2024 р.
3.	Термін здачі студентом закінченої роботи «25» червня 2024 р.
4.	Вихідні дані до проекту (роботи): В програмній системі передбачити:
реалізація двох компонентів (Back-end, IoT), унікальність, можливість заробітку, актуальність, розповсюдженість, масштабованість, забезпечення конфіденційності та адміністрування системи	
5.	Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проєктування програмного проєкту, структура бази даних, розробка програмного проєкту, опис розробленої програмної системи, висновки, перелік посилань, додатки	
6.	Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) Deployment Diagram, Use Case Diagram, Entity-Relationship Model, Interaction Overview Diagram,  Activity Diagram, State Diagram, Component Diagram, Package Diagram	
КАЛЕНДАРНИЙ ПЛАН

Номер	Назва етапів курсової роботи	Строк виконання етапів роботи	Примітки
1	Функціональна специфікація
програмного проєкту	31.03.24	
2	Проєктування програмного
проєкту	30.04.24	
3	Кодування програмного проєкту	20.05.24	
4	Оформлення пояснювальної
записки	31.05.24	
5	Захист курсової роботи	08.06.24	

Дата видачі завдання «1» квітня 2024 р.
Керівник	__________________ доц. Лещинський В.О.
(підпис)
Завдання прийняв до виконання
ст. гр. ПЗПІ-21-1	                 Жмайцев М. О.
(підпис)


 
РЕФЕРАТ

	Пояснювальна записка до курсової роботи: 68 с., 19 рис., 2 табл. 3 додатки, 5 джерел.
	ПРОГРАМНА СИСТЕМА, ДОКТОР, КОРИСТУВАЧ, ЛІКИ, ОНКОХВОРІ, ДАТЧИКИ.
	Об’єктом дослідження є галузь призначення та контролю ліків для онкохворих пацієнтів, зокрема створення програмної системи для автоматизації процесу призначення і контролю ліків з використанням технологій IoT.
	Метою курсової роботи є розробка програмної системи, яка дозволяє автоматизувати процес призначення і контролю ліків для онкохворих пацієнтів. Ця програмна система надасть користувачам можливість переглядати дані про призначені ліки, контролювати їх прийом та отримувати сповіщення у разі необхідності коригування дозування або режиму прийому.
Програмна системи розроблена за допомогою таких технологій: .NET Core 8, а саме ASP.NET Web Api з базою даних PostgreSQL, та з IoT Core MQTT, Arduino IDE.
У результаті роботи було створено програмну систему для призначення та контролю ліків для онкохворих пацієнтів. Програмна система складається з двох основних компонентів: серверна частина, яка відповідає за основну логіку призначення та контролю ліків та IoT частина, яка забезпечує видачу препаратів онкохворим пацієнтам.


ЗМІСТ
	

Вступ	7
1 Аналіз предметної області	8
    1.1 Бізнес-вимоги	8
        1.1.1 Бізнес-можливості	8
        1.1.2 Бізнес-цілі та критерії успіху	9
        1.1.3 Потреби клієнтів або ринку	10
        1.1.4 Бізнес-ризики	11
    1.2 Концепція рішення	2
        1.2.1 Окреслення концепції	2
        1.2.2 Головна функціональність	3
        1.2.3 Припущення та залежності	5
    1.3 Рамки та обмеження проєкту	6
        1.3.1 Рамки первинного випуску	6
        1.3.2 Рамки наступних випусків	19
        1.3.3 Обмеження та винятки	20
    1.4 Бізнес-контекст	21
        1.4.1 Профілі зацікавлених сторін	26
        1.4.2 Пріоритети проєкту	27
        1.4.3 Робоче середовище	28
2 Постановка задачі	29
3 Проєктування бази даних	30
    3.1 Побудова ER-діаграми	6
    3.2 Побудова логічної моделі бази даних на основі ER-діаграми	8
4 Архітектура програмної системи	34
    4.1 Архітектура серверної частини	34
    4.2 Архітектура IoT частини	38
   5 Опис програмної системи	48
    5.1 Виклик і завантаження	48
    5.2 Призначення і логічна структура	40
    5.3 Опис програмної реалізації	51
Висновки	51
Перелік джерел посилання	60
Додаток А Результат перевірки на плагіат	62
Додаток Б Програмний код серверної частини	63
Додаток В Програмний код IoT пристрою	67

 
ВСТУП


	У сучасному світі, де боротьба з раком стає дедалі важливішим завданням, програмна система для призначення та контролю ліків онкохворим пацієнтам пропонує інноваційне рішення для покращення якості життя та результатів лікування. Ця система відповідає на потребу в надійному, ефективному та безпечному призначенні, моніторингу та управлінні ліками для пацієнтів, що проходять курс онкологічного лікування.
Основні функції системи:
	Безпечна та зручна аутентифікація пацієнтів: Пацієнти можуть легко створювати облікові записи, безпечно входити в систему та керувати своїми профілями. Система забезпечує конфіденційність та зручність доступу до особистої інформації, медичної історії та планів лікування.
	Завантаження та перевірка електронних рецептів: Пацієнти можуть завантажувати електронні рецепти від своїх лікарів через веб-сайт або мобільний додаток. Система автоматично перевіряє автентичність та достовірність рецептів, запобігаючи помилкам та зловживанням.
	Всебічна база даних ліків: Система містить детальну базу даних онкологічних препаратів, включаючи описи, дозування, інструкції з прийому та можливі побічні ефекти. Пацієнти можуть легко шукати та переглядати інформацію про призначені їм ліки, роблячи свідомий вибір щодо лікування.
	Синхронізація та авторизація з розумними дозаторами: Система забезпечує синхронізацію та авторизацію з розумними дозаторами ліків, оснащеними NFC-чіпами. Це гарантує точне дозування та своєчасний прийом ліків, покращуючи комплаєнс пацієнтів та результати лікування.
	Система пропонує ряд переваг для онкохворих пацієнтів та медичних працівників:
	Підвищення безпеки та ефективності лікування: Система мінімізує ризики помилок у дозуванні та прийомі ліків, покращуючи загальну безпеку та результативність лікування.
	Покращення комплаєнсу пацієнтів: Зручні та нагадування про прийом ліків сприяють кращому дотриманню режиму лікування, що може призвести до кращих результатів.
	Підвищення обізнаності пацієнтів: Доступ до детальної інформації про ліки та можливі побічні ефекти робить пацієнтів більш обізнаними та готовими до лікування.
	Економія часу та ресурсів: Автоматизація процесів рецептур, перевірки та моніторингу економить час та ресурси медичних працівників, дозволяючи їм зосередитися на пацієнтах.
Це інноваційний інструмент, що пропонує комплексний підхід до призначення, моніторингу та контролю ліків для онкохворих пацієнтів. Завдяки своїм функціям система сприяє покращенню безпеки, ефективності та якості життя пацієнтів, що проходять курс лікування раку.

 
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес-можливості


Ринок програмного забезпечення для управління медикаментами пропонує ряд рішень, кожне з яких має свої сильні та слабкі сторони. Ось кілька аналогів:
Medicover: Ця компанія пропонує комплексні програмні продукти для автоматизації медичних процесів, включаючи видачу ліків. Їхні рішення дозволяють ефективно відслідковувати рецепти, контролювати запаси ліків та автоматизувати процес видачі ліків пацієнтам. Однак, їхні програмні продукти можуть бути складними у використанні та не завжди враховують потреби невеликих медичних закладів або індивідуальних пацієнтів.
HealthSolutions: Ця платформа фокусується на налагодженні співпраці між лікарнями, лікарями та пацієнтами. Її функціонал включає електронний обмін рецептами та автоматизований процес видачі ліків через аптеки. Проте, система HealthSolutions може бути занадто дорогою для невеликих медичних практик, а також мати обмежені можливості інтеграції з різними медичними системами.
PharmEasy: Ця компанія спеціалізується на розробці рішень для аптечних мереж та лікарень. Їхні програмні продукти пропонують ефективну систему управління запасами ліків, електронний обмін рецептами та можливості відстеження медичних історій пацієнтів. Однак, їхні рішення можуть бути надто складними та дорогими для невеликих аптек, а також не завжди надійно забезпечують безпеку пацієнтів при видачі ліків.
Бізнес-можливості та модель монетизації
Система «OncoBound» орієнтована на ринок онкологічної допомоги, включаючи лікарні, онкологічні центри та індивідуальних пацієнтів, які потребують надійної системи управління медикаментами. Основні бізнес-можливості включають:
	Співпраця з медичними закладами: Впровадження «OncoBound» в щоденний процес управління медикаментами лікарень, онкологічних центрів та інших медичних закладів.
	Надання доступу пацієнтам: Пропонування пацієнтам мобільного додатку «OncoBound», який дозволяє їм відстежувати свої рецепти, отримувати нагадування про прийом ліків, спілкуватися з лікарями та вести записи про своє самопочуття.
Модель монетизації:
	Підписки для медичних закладів: Платні підписки з різними рівнями доступу, які пропонують розширений функціонал, аналітику даних, інтеграцію з іншими системами та інші додаткові можливості.
	Безкоштовний мобільний додаток для пацієнтів: Базова версія з основними функціями, з можливістю придбання преміум-підписок для доступу до додаткових функцій, таких як телемедичні консультації, управління побічними ефектами та персоналізовані рекомендації.


1.1.2 Бізнес-цілі та критерії успіху


БЦ-1: Розширення охоплення онкоцентрами:
БЦ-1.1: Збільшити присутність системи щонайменше у п’яти онкологічних центрах або лікарнях у кожному регіоні, де впроваджується продукт.
БЦ-1.2: Налагодити стійкі партнерські відносини з онкологічними центрами та аптеками в кожному регіоні для забезпечення швидкого та надійного постачання програмного забезпечення та необхідних ресурсів.

БЦ-2: Розширення функціональності та контенту:
БЦ-2.1: Розробити та впровадити нові алгоритми аналізу даних для покращення точності моніторингу призначення ліків, зменшення помилок у дозуванні та надання більш персоналізованих рекомендацій щодо лікування.
БЦ-2.2: Забезпечити доступ до інформації про не менше 1000 онкологічних препаратів та їх дозування, включаючи інноваційні та спеціалізовані ліки для різних видів раку.

БЦ-3: Залучення нових клієнтів та розширення ринку:
БЦ-3.1: Залучити 50 нових онкологічних центрів та лікарень до використання програмної системи, надаючи їм необхідну підтримку та навчання.
БЦ-3.2: Розширити ринок збуту на 50% протягом року завдяки активному маркетингу, участі у профільних конференціях та заходах, спрямованих на залучення нових клієнтів.

КУ-1: Задоволеність клієнтів та партнерів:
КУ-1.1: Досягти рівня задоволеності клієнтів не менше 95%, згідно з регулярними опитуваннями, відгуками та зворотним зв’язком.
КУ-1.2: Укласти партнерські угоди з не менше ніж 20 онкологічними центрами або мережами аптек та забезпечити їхню задоволеність якістю продукту та обслуговуванням.

КУ-2: Успішність використання продукту:
КУ-2.1: Забезпечити безперебійну роботу не менше 98% встановлених систем моніторингу призначення ліків, гарантуючи точні дані про призначення та прийом препаратів.
КУ-2.2: Інтегрувати програмне забезпечення з існуючими медичними інформаційними системами у не менше 90% випадків для забезпечення зручного обміну даними.

КУ-3: Ефективність та результативність системи:
КУ-3.1: Забезпечити точність призначення та видачі ліків не менше 99%, щоб уникнути помилок та гарантувати правильне дозування для пацієнтів.
КУ-3.2: Забезпечити надійну та ефективну роботу системи автоматичного дозування ліків у не менше 95% випадків, гарантуючи правильний вибір та видачу препаратів.


1.1.3 Потреби клієнтів або ринку


Потреби клієнтів та ринку у програмній системі призначення та контролю ліків для онкохворих пацієнтів:
1. Точний та надійний моніторинг призначення та прийому ліків:
Онкохворі пацієнти та медичні працівники потребують системи, яка гарантує точність та надійність моніторингу призначення та прийому ліків, щоб пацієнти отримували правильні препарати та дозування відповідно до плану лікування.
2. Індивідуалізація та оптимізація терапії:
Потреби у лікуванні онкологічних захворювань можуть значно варіюватися у пацієнтів. Система повинна бути гнучкою та вміти адаптуватися до різних типів онкопрепаратів, їх дозування та режимів прийому, забезпечуючи персоналізований підхід до терапії кожного пацієнта.
3. Зручність та простота використання:
Медичні працівники та онкологічні центри потребують зручного та зрозумілого інтерфейсу користувача, а також простої системи керування, щоб швидко та ефективно обробляти призначення, контролювати прийом ліків та надавати пацієнтам необхідну підтримку.
4. Ефективне управління онкологічними ресурсами:
Система повинна оптимізувати використання онкологічних ресурсів, допомагаючи уникнути надмірних витрат ліків, запобігаючи їх неефективному використанню та можливим побічним ефектам.
5. Доступність технічної підтримки та консультацій:
Клієнти очікують наявності надійної технічної підтримки та можливості отримати консультації щодо використання та оптимізації системи призначення та контролю ліків. Доступність підтримки та консультацій відіграє важливу роль у впевненості користувачів у правильності та ефективності роботи системи.


1.1.4 Бізнес-ризики


Бізнес-ризики у програмній системі призначення та контролю ліків для онкохворих пацієнтів:
1. Технічні проблеми та несправності:
Ризик виникнення технічних проблем або несправностей у системі, що може призвести до помилок у призначенні ліків, неточності дозування або перебоїв у роботі. Це може загрожувати здоров’ю пацієнтів, порушити довіру до системи та вплинути на її репутацію.
2. Конкурентний тиск та ринкова насиченість:
Ризик жорсткої конкуренції на ринку програмних систем для онкологічного лікування. Інші компанії можуть пропонувати схожі продукти, що змушує «OncoBound» виокремлюватися на ринку за рахунок унікальних функціональних можливостей, інноваційних рішень та цінності, яку система пропонує онкологічним центрам та пацієнтам.
3. Законодавчі та регуляторні ризики:
Ризик невідповідності системи мінливим медичним стандартам, протоколам лікування та регуляторним вимогам. Це може призвести до юридичних проблем, обмежень у використанні системи та додаткових витрат на її адаптацію до нових норм.
4. Ризик кібербезпеки та конфіденційності даних:
Ризик втрати або витоку конфіденційної інформації про пацієнтів внаслідок кібератак, хакерських вторгнень або технічних збоїв. Це може призвести до порушення конфіденційності, втрати довіри пацієнтів та шкоди репутації компанії.
5. Фінансові ризики та обмежені ресурси:
Ризик обмежених фінансових ресурсів для маркетингу, реклами та просування системи «OncoBound». Це може ускладнити залучення нових клієнтів, розширення ринкової частки та досягнення запланованих показників рентабельності.
Для мінімізації цих ризиків компанія планує:
Забезпечити ретельне тестування та контроль якості системи «OncoBound» для запобігання технічним проблемам та несправностям.
Постійно моніторити зміни в законодавстві, медичних стандартах та протоколах лікування, щоб гарантувати відповідність системи всім вимогам.
Впровадити найсуворіші заходи кібербезпеки та захисту даних для запобігання витоку або втрати конфіденційної інформації.
Розробити ефективну стратегію маркетингу та просування, яка з урахуванням обмежених ресурсів дозволить максимально охопити цільову аудиторію та донести цінність системи «OncoBound» до потенційних клієнтів.


1.2 Концепція рішення
1.2.1 Окреселення концепції


Програмна система для призначення та контролю ліків онкохворим пацієнтам «OncoBound» розроблена з метою надання онкологічним центрам та аптекам інноваційного інструменту для оптимізації процесу призначення, контролю та видачі онкопрепаратів. Цей продукт покликаний спростити та покращити фармацевтичну складову лікування онкологічних захворювань, забезпечуючи точність, безпеку та ефективність.
Основні переваги «OncoBound»:
	Точність та надійність: «OncoBound» гарантує точність призначення та видачі онкопрепаратів, що є критично важливим для життя та здоров’я пацієнтів. Система мінімізує ризик помилок у виборі препаратів, їх дозуванні та режимі прийому, забезпечуючи безпеку та ефективність лікування.
	Індивідуалізований підхід: Продукт враховує індивідуальні особливості кожного пацієнта, його діагноз, стадію захворювання, супутні патології та інші фактори, що впливають на підбір терапії. Це дозволяє призначати оптимальні схеми лікування з максимальним ефектом та мінімальними побічними ефектами.
	Ефективність та оптимізація: «OncoBound» оптимізує робочий процес онкологічних центрів та аптек, зменшуючи час на оформлення та видачу ліків, знижуючи навантаження на персонал та мінімізуючи ризики помилок. Це сприяє кращому обслуговуванню пацієнтів та підвищенню ефективності лікування.
	Конфіденційність та безпека даних: «OncoBound» гарантує конфіденційність пацієнтських даних та безпеку медичної інформації, дотримуючись найсуворіших стандартів та вимог щодо захисту особистих даних.
	Інтеграція та автоматизація: Система безшовно інтегрується з існуючими медичними інформаційними системами, автоматично збираючи та обробляючи дані про пацієнтів, призначені лікарські препарати та їх дозування. Це робить процес призначення та контролю ліків швидшим, зручнішим та точнішим.
	Підтримка та навчання: Команда фахівців «OncoBound» пропонує постійну підтримку та навчання персоналу онкологічних центрів та аптек, гарантуючи, що користувачі завжди розуміють та вміють використовувати всі можливості системи.
Впровадження «OncoBound» у онкологічних центрах та аптеках допоможе:
	Підвищити точність та безпеку призначення та видачі онкопрепаратів.
	Оптимізувати процес фармацевтичного забезпечення онкологічних пацієнтів.
	Покращити ефективність та результати лікування.
	Підвищити рівень задоволеності пацієнтів та медичного персоналу.
«OncoBound» – це інноваційне рішення, яке покликане покращити якість життя онкохворих пацієнтів та сприяти успішному лікуванню.


1.2.2 Головна функціональність 


MF-1: Реєстрація та авторизація користувачів
Система «OncoBound» забезпечує безпечну та зручну реєстрацію та авторизацію користувачів, надаючи персоналу онкологічних центрів та аптек чітко визначені ролі та рівні доступу до даних та функціональних можливостей системи.
MF-2: Призначення та видача онкопрепаратів
«OncoBound» дозволяє онкологам та аптечним працівникам точно та ефективно призначати та видавати онкопрепарати згідно з індивідуальними планами лікування пацієнтів. Система автоматично підбирає правильні препарати, їх дозування та режим прийому, мінімізуючи ризик помилок.
MF-3: Моніторинг та управління датчиками пацієнтів
Система «OncoBound» може бути розширена за допомогою можливості моніторингу та управління датчиками, які під'єднані до онкохворих пацієнтів. Це може бути зроблено через адміністративну панель.
MF-4: Моніторинг та контроль термінів придатності ліків
Система автоматично відстежує терміни придатності онкопрепаратів та надсилає своєчасні повідомлення персоналу про необхідність вилучення та заміни прострочених ліків, гарантуючи безпеку та ефективність лікування.

MF-5: Історія призначень та видачі ліків
«OncoBound» веде детальний журнал призначень та видачі онкопрепаратів для кожного пацієнта, забезпечуючи прозорість, зручний доступ до інформації та можливість аналізу курсу лікування.
MF-6: Автоматичні повідомлення для пацієнтів
Система автоматично надсилає пацієнтам нагадування про необхідність прийому ліків відповідно до призначеного графіку, сприяючи дотриманню режиму лікування та підвищуючи його ефективність.
MF-7: Генерація звітів для онкологічних центрів
«OncoBound» автоматично генерує детальні звіти про призначення, видачу та контроль онкопрепаратів, надаючи онкологічним центрам цінну інформацію для аналізу даних, прийняття рішень та покращення якості лікування.
MF-8: Захист конфіденційності та безпека даних
«OncoBound» відповідає найсуворішим стандартам безпеки та конфіденційності, гарантуючи захист пацієнтських даних та дотримання всіх вимог законодавства в галузі медичних послуг.


1.2.3 Припущення та залежності


Припущення:
П1: Інформація, яку надають онкологічні центри, лікарі та пацієнти, є точною та актуальною. Система ґрунтується на тому, що медичні працівники та пацієнти надають достовірні та повні дані для складання планів лікування та призначення онкопрепаратів.
П2: Користувачі правильно та вчасно сприймають повідомлення системи, пов’язані з призначеннями та онкопрепаратами. Це включає в себе реагування на нагадування про прийом ліків, дотримання режиму лікування та звернення за консультацією до медичних фахівців через систему.
П3: Онкологічні центри та аптеки мають стійкий доступ до Інтернету для взаємодії з центральною системою «OncoBound». Це передбачає надійне та безперебійне Інтернет-з’єднання для обміну даними та отримання оновлень.
Залежності:
З1: Інтеграція з електронними медичними записами. Щоб забезпечити точність та актуальність інформації про пацієнтів та їх лікування, система «OncoBound» повинна мати можливість взаємодіяти з електронними медичними записами пацієнтів та лікарів.
З2: Інтеграція з базами даних онкопрепаратів. Система повинна мати доступ до актуальних даних про онкопрепарати, їх характеристики, взаємодію та можливі побічні ефекти для оптимізації підбору терапії та запобігання небажаним реакціям.
З3: Технічна підтримка від розробника. Система може потребувати оновлень, налаштування або вирішення технічних проблем. Залежність від забезпечення технічної підтримки з боку розробника системи є ключовою для безперебійної роботи «OncoBound».


1.3 Рамки та обмеження проєкту
1.3.1 Рамки первинного випуску


Веб-інтерфейс:
Перша версія програмного продукту «OncoBound» буде зосереджена на наданні користувачам базових функціональних можливостей для управління призначеннями, видачею та контролем онкопрепаратів. Цей розділ описує функціональні можливості та характеристики, які будуть реалізовані в рамках цього випуску:
Веб-застосунок:
MF-1: Реєстрація та авторизація: Користувачі зможуть створити обліковий запис та авторизуватися в системі за допомогою логіну та паролю для безпечного доступу до даних та функціоналу.
MF-2: Перегляд інформації про призначення та онкопрепарати: Користувачі зможуть переглядати свої призначення, історію лікування, детальну інформацію про онкопрепарати, їх характеристики, режим прийому та можливі побічні ефекти.
MF-3: Додавання та редагування призначень: Персонал онкологічних центрів зможе додавати, редагувати та узгоджувати призначення онкопрепаратів згідно з індивідуальними планами лікування пацієнтів.
MF-4: Інформація про онкопрепарати: Система буде надавати доступ до актуальної інформації про онкопрепарати, їх характеристики, механізм дії, показання, протипоказання, можливі побічні ефекти, взаємодії з іншими препаратами та дані про дослідження.
MF-5: Захист конфіденційності та безпека даних: Система гарантуватиме конфіденційність та захист персональних даних користувачів, забезпечуючи безпечний доступ до медичної інформації відповідно до найсуворіших стандартів та вимог законодавства.
Мобільний додаток:
MF-1: Реєстрація та авторизація: Користувачі зможуть зареєструватися та увійти до системи через мобільний додаток за допомогою логіну та паролю.
MF-2: Перегляд інформації про призначення та онкопрепарати: Пацієнти зможуть переглядати свої призначення, історію лікування, детальну інформацію про онкопрепарати, їх характеристики, режим прийому та можливі побічні ефекти.
MF-3: Нагадування та календар прийому ліків: Мобільний додаток надсилатиме пацієнтам нагадування про час прийому онкопрепаратів, допомагаючи їм дотримуватися режиму лікування та не пропускати прийом ліків.
MF-4: Захист конфіденційності та безпека даних: Мобільний додаток гарантуватиме захист персональних даних користувачів, забезпечуючи безпечний доступ до медичної інформації через мобільні пристрої.
Цей перший випуск «OncoBound» має на меті надати онкологічним центрам та пацієнтам зручний та безпечний інструмент для управління призначеннями, видачею та контролем онкопрепаратів. Це сприятиме покращенню дотримання режиму лікування, підвищенню ефективності терапії та покращенню якості життя пацієнтів.


1.3.2 Рамки наступних випусків


Майбутні випуски «OncoBound» будуть зосереджені на розширенні функціональних можливостей та наданні користувачам більш глибоких та зручних інструментів для ефективного управління призначеннями, видачею та контролем онкопрепаратів. Новий функціонал буде спрямований на покращення життя пацієнтів, оптимізацію терапії та підвищення якості лікування.
У веб-застосунку користувачі матимуть доступ до:
MF-1: Розширений аналіз даних: Система надасть можливість аналізувати додаткові параметри онкопрепаратів, враховуючи їхню ефективність, побічні ефекти, механізми дії та дані про дослідження, для кращого підбору оптимальної терапії.
MF-2: Планування та моніторинг лікування: Користувачі зможуть планувати та вести облік своїх курсів лікування, відстежувати їхній статус, отримувати рекомендації щодо дотримання графіку та доступ до навчальних матеріалів.
MF-3: Інтеграція з медичними закладами: Система буде мати можливість інтеграції з медичними інформаційними системами лікарень та амбулаторних закладів для отримання актуальних даних про призначення, історію лікування та медичну документацію пацієнтів.
Адміністратори веб-застосунку матимуть доступ до:
MF-1: Розширена технічна підтримка: Адміністратори отримають доступ до розширеної технічної підтримки, яка включає в себе надання консультацій щодо налаштування системи, вирішення технічних проблем та моніторингу роботи «OncoBound» в медичних закладах.
Мобільний додаток для пацієнтів буде доповнений:
MF-1: Персоналізовані рекомендації: Система буде надавати персоналізовані рекомендації пацієнтам, враховуючи їхні індивідуальні потреби, діагноз, стадію захворювання, реакції на лікування та інші фактори.
MF-2: Моніторинг симптомів та ефективності лікування: Пацієнти зможуть вести щоденник симптомів, побічних ефектів та загального самопочуття, дозволяючи їм та їхнім лікарям відстежувати зміни у стані здоров’я та ефективність терапії.
Ці нові можливості розширять функціональність «OncoBound» та нададуть онкологічним центрам, лікарям та пацієнтам більше інструментів для ефективного управління призначеннями, видачею та контролем онкопрепаратів, сприяючи покращенню результатів лікування та якості життя пацієнтів.


1.3.3 Обмеження та винятки


Програмне забезпечення «OncoBound» має деякі обмеження та винятки, які можуть впливати на його функціональність та ефективність в певних ситуаціях. Нижче наведено перелік цих обмежень та винятків:
1. Залежність від Інтернет-з’єднання:
Для користування системою «OncoBound» та отримання оновлень даних необхідне активне Інтернет-з’єднання.
У випадку відсутності доступу до мережі Інтернет користувачі можуть не мати можливості отримувати актуальні дані про онкопрепарати, призначення, медичну інформацію та використовувати деякі функції системи.
2. Технічні обмеження пристроїв:
Певні функції «OncoBound» можуть бути обмежені технічними можливостями користувацьких пристроїв.
Наприклад, старі смартфони чи комп’ютери можуть не підтримувати деякі інноваційні функції системи, такі як 3D-моделювання пухлин або віртуальна реальність для візуалізації лікування.
3. Системні вимоги:
Для оптимальної роботи «OncoBound» рекомендується використовувати його на сучасних пристроях з достатнім обсягом оперативної пам’яті та потужністю процесора.
На застарілих або слабкопродуктивних пристроях може спостерігатися відчутний спад швидкодії, затримка в роботі системи та можливі збої.
4. Схильність до технічних помилок:
Як будь-яке програмне забезпечення, «OncoBound» може містити технічні помилки або бути схильним до програмних збоїв, які можуть вплинути на його роботу.
Команда розробників веде систематичний моніторинг та вдосконалення продукту, проте не може гарантувати відсутність всіх можливих помилок.
У разі виявлення помилок або збоїв у роботі системи користувачам рекомендується повідомити про них службу технічної підтримки «OncoBound» для їхнього швидкого виправлення.
5. Конфіденційність та безпека:
Незважаючи на заходи безпеки, інформація, яку користувачі вводять у програмне забезпечення «OncoBound», може бути піддається ризику атак та несанкціонованого доступу.
Користувачі повинні бути уважні та обережні під час обміну конфіденційною інформацією через систему.
«OncoBound» використовує сучасні протоколи шифрування та захисту даних, проте не може гарантувати абсолютну безпеку інформації.
Користувачам рекомендується використовувати складні паролі, не ділитися ними з іншими особами та регулярно їх змінювати.


1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін


	На таблиці 1.1 описані профілі зацікавлених сторін:
Таблиця 1.1 – Профілі зацікавлених сторін проекту

Зацікавлена сторона	Головна
цінність	
Ставлення	
Головний інтерес	
Обмеження
Онкологічні лікарні	Швидкий доступ до медичної інформації 	Стійке, допоки продукт буде сумісний з теперішньою системою моніторингу	Підвищення продуктивності медичного персоналу та оптимізація лікування та виявлення онкологічних захворювань	Наявність доступу до мережі Інтернет або електромережі
Медичний персонал та аналітики 	Вчасний та точний моніторинг онкохворих для запобігання ускладнень та швидкої реакції	Орієнтоване на зручніть, позитивне	Зниження ризику серйозних медичних ускладнень та підвищення якості надання медичних послуг	Доступність датчиків для медичних даних
Рідні пацієнтів	Швидкий доступ до стану людини	Позитивне, орієнтоване на зручність	Слідкування за станом онкохворих	Доступ до Інтернету
Інвестори	Фінансова віддача, зростання доходів, реінвестиції	Орієнтоване на прибуток	Зростання ринку, перевага над конкурентами	Очікування ROI (повернення інвестицій), ринкові ризики


1.4.2 Пріорітети проєкту


	На таблиці 1.2 наведені пріорітети проєкту:
Таблиця 2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження
(граничні значення)	Ступінь свободи
(допустимий діапазон)
Розклад/план робіт		Продукт має бути випущеним приблизно до 04.06.2024	Можливе відхилення від графіку на 1-3 місяці
Функціональність			100% функціоналу має працювати на релізі 1.0
Ціна		~82 000 гривень	Допустиме відхилення на 10%
Персонал		Максимальний розмір команди це 1 розробник та адміністратор	
Якість			100% всіх наявних даних з датчиків повинні бути вірними 


1.4.3 Робоче середовище


Даний продукт буде використовуватися в браузері або за допомогою мобільного телефону чи планшету. Нижче наведено використані технології:
Для розробки серверної частини використовуються C# [1], а саме .NET Core 8 та ASP.NET [2] Web API. Ці технології забезпечують високу продуктивність, масштабованість та безпеку веб-додатків. Вони також дозволяють легко інтегруватися з різноманітними базами даних та сервісами.
Для створення користувацького інтерфейсу використовується React.JS [4], який забезпечує високу швидкість роботи та зручність у розробці односторінкових додатків. Для управління станом додатка використовується Redux, що дозволяє ефективно управляти складними станами. Для стилізації застосовується SCSS, що додає гнучкості та зручності в роботі з CSS.
База даних реалізована на основі PostgreSQL [3], відомого своєю надійністю та продуктивністю. PostgreSQL забезпечує високу швидкість обробки запитів та зберігання великих обсягів даних. Крім того, ця система управління базами даних підтримує складні запити та транзакції, що є критично важливим для медичних додатків. Завдяки використанню Entity Framework Core, ORM для .NET, забезпечується зручний та ефективний доступ до бази даних, що дозволяє швидко та безпечно працювати з даними.
Для інтеграції IoT-пристроїв використовуються брокер IoT Core MQTT [5], Arduino IDE та модулі температури, NFC датчики, декілька серво-приводів та Wi-Fi модулі. Ці компоненти дозволяють створювати розумні пристрої, які можуть взаємодіяти з програмною системою в реальному часі, забезпечуючи автоматизацію процесу призначення та контролю ліків для онкохворих пацієнтів.
 
2	ПОСТАНОВКА ЗАДАЧІ


Відповідно до проведеного аналізу предметної області, завданням курсової роботи стало розроблення програмної системи призначення та контролю ліків для онкохворих пацієнтів.
База даних повинна містити інформацію про: докторів, користувачів, рецепти, ліків, інформацію про видачі ліків та повідомлення.
Використовуючи веб-додаток, клієнти та доктори мають можливість реєструватися та авторизуватися в системі, переглядати інформацію відповідно до своїх ролей, а також отримувати доступ до робочої області, де відображаються ліки, рецепти та відповідні дані.
Завдяки мобільному додатку клієнти та доктори можуть взаємодіяти з системою без використання персонального комп'ютера, що забезпечує мобільність і зручність використання на ходу.
Із застосуванням IoT-приладу здійснюється автоматизована дозація та видача ліків для клієнтів, що підвищує точність та ефективність процесу медичного обслуговування.
Крім того, програмна система повинна підтримувати локалізацію та інтернаціоналізацію, включаючи: кодові таблиці символів, обчислення та формат дати й часу, місцевий та всесвітній час, правила сортування тексту, а також різні напрямки введення тексту.

3	ПРОЄКТУВАННЯ БАЗИ ДАНИХ
3.1 Побудова ER-діаграми


Для проектування бази даних попередньо була розроблена ER-діаграма (див. рис. 3.1). Вона складається з 7 таблиць: користувачi (Users), доктори (Doctors), рецепти (Prescriptions), лiки (Medicines), призначення лiкiв за рецептом (Medications), логи видачi ліків (MedicationLogs), повідомлення (Notifications).
 
Рисунок 3.1 – ER-діаграма проєкту
У базі даних наявні наступні зв’язки між сутностями:
	Користувач – Рецепт (1:М, оскільки користувач може отримувати рецепти від лікарів);
	Лікар – Рецепт (1:М, оскільки лікар може виписувати рецепти для різних пацієнтів);
	Користувач – Призначення ліків (1:М, оскільки користувач може мати різні рецепти з різними призначеннями ліків);
	Рецепт – Призначення ліків (1:М, оскільки в одному рецепті може бути призначено декілька ліків);
	Лікарський засіб – Призначення ліків (1:М, оскільки один і той самий препарат може бути призначений для різних рецептів);
	Лікар – Повідомлення (1:М, оскільки один лікар може мати багато повідомлень);


3.2 Побудова логічної моделі бази даних на основі ER-діаграми


	Отож, у логічній моделі повинні знаходитись такі сутності:
	Користувачі (Users);
	Доктори (Doctors);
	Рецепти (Prescriptions);
	Ліки (Medicines);
	Призначення ліків за рецептом (Medications);
	Логи видачі ліків (MedicationLogs);
	Повідомлення (Notifications).
Створимо таблицю користувачів (Users). Вона буде містити такі атрибути: Id (первинний ключ), Fullname, Password, Salt, Email, Role.
Перевіримо таблицю Users на відповідність нормалізації:
– усі атрибути атомарні: містять лише одне значення;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця відповідає першій, другій та третій нормальним формам.
Створимо таблицю докторів (Doctors). Вона буде містити такі атрибути: Id (первинний ключ), Name, Specialty, Email, Password, Salt.
Перевіримо таблицю Doctors на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій та третій нормальним формам.
Створимо таблицю рецептів (Prescriptions). Вона буде містити такі атрибути: Id (первинний ключ), DatePrescribedUTC, UserId (зовнішній ключ до таблиці Users), DoctorId (зовнішній ключ до таблиці Doctors), Dosage, Duration.
Перевіримо таблицю Prescriptions на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця відповідає першій, другій та третій нормальним формам.
Створимо таблицю ліків (Medicines). Вона буде містити такі атрибути: Id (первинний ключ), Name, Description, SideEffects, Interactions, ExpirationDate.
Перевіримо таблицю Medicines на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій та третій нормальним формам.
Створимо таблицю призначень ліків за рецептом (Medications). Вона буде містити такі атрибути: Id (первинний ключ), PrescriptionId (зовнішній ключ до таблиці Prescriptions), MedicineId (зовнішній ключ до таблиці Medicines), Frequency, StartTimeUTC, EndTimeUTC.
Перевіримо таблицю Medications на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця відповідає першій, другій та третій нормальним формам.

Створимо таблицю логів видачі ліків (MedicationLogs). Вона буде містити такі атрибути: Id (первинний ключ), MedicationId (зовнішній ключ до таблиці Medications), UserId (зовнішній ключ до таблиці Users), TimestampUTC, Status.
Перевіримо таблицю MedicationLogs на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій та третій нормальним формам.
Створимо таблицю повідомлень (Notifications). Вона буде містити такі атрибути: Id (первинний ключ), Message, isRead, DoctorId (зовнішній ключ до таблиці Doctors).
Перевіримо таблицю Notifications на відповідність нормалізації:
– усі атрибути атомарні;
– відсутність дублювання даних;
– усі неключові атрибути залежать від первинного ключа.
Отже, таблиця відповідає першій, другій та третій нормальним формам.
На основі проектування таблиць та зв’язків в майбутній базі даних було отримано її логічну схему, яка задовольняє першій, другій та третій нормальним формам (див. рис. 3.2).
 
Рисунок 3.2 – Логічна схема бази даних

Оскільки всі таблиці у логічній схемі бази даних відповідають 3-й нормальній формі, можна зробити висновок, що база даних загалом задовольняє вимоги 3-й нормальної форми.
 
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини


Користувачами системи «OncoBound» є 3 типи акторів: клієнт, доктор та девайс. Клієнти та доктори взаємодіють з веб-частиною, мобільним додатком, та IOT девайсом. За рахунок цього була створена UML діаграма прецедентів (див. рис. 4.1).
За допомогою веб-додатку клієнту та доктору надаються такі можливості як авторизація та реєстрація, перегляд інформації відповідно ролі користувача, відображає для користувача робочу область з лiками, рецептами та їх даними.
За допомогою мобільного додатку клієнтовi та доктору надається така можливiсть як взаємодія з системою на ходу, без персонального комп’ютера.
За допомогою IoT-приладу буде відбуватися дозацiя та видача лiкiв для клієнта.
 
Рисунок 4.1 – Діаграма прецедентів серверної частини програмної системи
Для створення серверної частини системи було обрано мову програмування C# з використанням технології ASP.NET Core Web API, що дозволяє писати швидкий та ефективний код.
Як база даних використовується PostgreSQL, до якої серверний додаток звертається за допомогою технології Entity Framework Core. Ця бібліотека дуже зручна, оскільки забезпечує взаємодію з базою даних через об'єктно-орієнтований підхід. 
Для більш детального відображення використаних технологій було створено діаграму розгортання (див. рис. 4.2).
 
Рисунок 4.2 – Діаграма розгортання серверної частини програмної системи
Для демонстрації та тестування API застосовується інструмент OpenApi Swagger, що дозволяє зручно переглядати та тестувати API, підвищуючи якість та зручність розробки. Захист даних та конфіденційність забезпечується завдяки використанню захищеного протоколу HTTPS, який захищає дані під час передачі.
Для хешування паролів та створення авторизаційних токенів застосовується бібліотека System.Security.Cryptography, а для генерації токенів – JWT (Json Web Tokens), що забезпечує надійний механізм управління доступом користувачів. Для обміну даними використовується принцип REST API.
Система використовує API контролери для маршрутизації запитів. Вони розбивають програму на логічні компоненти, кожен з яких відповідає за обробку конкретних типів запитів або користувацьких дій, що спрощує управління кодом та розширення функціональності.
Архітектура серверного застосунку представлена на діаграмі пакетів (див. рис. 4.3).
 
Рисунок 4.3 – Діаграма пакетів серверної частини програмної системи

Приклади коду серверної частини наведені в додатку Б.



4.2 Архітектура ІоТ-частини


IoT частина системи взаємодіє з одним типом користувачів: клієнти (пацієнти). Пряма взаємодія з користувачами відбувається за допомогою монітора, на який виводиться інформація, та контейнер, куди пацієнт отримує ліки.
Взаємодію користувача з IoT частиною системи представлено на діаграмі прецедентів (див. рис. 4.4).
 
Рисунок 4.4 – Діаграма прецедентів ІоТ частини програмної системи «OncoBound»
	
Для демонстрації функціональних можливостей IoT частини системи було вирішено реалізувати програмний код на мові програмування C#, яка оптимально підходить для роботи з обмеженими апаратними ресурсами IoT пристроїв. Виведення інформації здійснюється через консольний інтерфейс (CLI). Надсилання даних реалізовано за допомогою бібліотеки System.Net.Http, а дані передаються у форматі JSON.
Програма призначена для тривалого доступу на сервері, де існує таблиця з ідентифікаторами, які можна присвоїти IoT пристрою. Це дозволяє зменшити час на обслуговування терміналів OncoBound. Код програми написано з мінімальною кількістю рядків для оптимізації під пристрої з обмеженою потужністю. Крім того, програма легко портується на реальні IoT пристрої.
Для розробки IoT частини системи було обрано мову програмування C#, а компіляція відбувається за допомогою CLR компоненту .NET 8. Запити створюються за допомогою бібліотеки System.Net.Http. Для парсингу об'єктів використовуються бібліотеки System.Text.Json та Newtonsoft.Json. Для більш детальної візуалізації використаних технологій було розроблено діаграму пакетів (див. рис. 4.5).
 
Рисунок 4.5 -  Діаграма пакетів ІоТ частини програмної системи
	Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. рис. 4.6).
 
Рисунок 4.6 – Діаграма взаємодії ІоТ частини програмної системи
	Також було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. рис. 4.7).
 
Рисунок 4.7 – Діаграма діяльності ІоТ частини програмної системи
	Таким чином, за допомогою діаграм пакетів, станів та діяльності були визначені основні технології та архітектурні рішення для системи. Це дозволило чітко визначити компоненти та їх взаємодію, забезпечуючи ефективну розробку та інтеграцію всіх частин системи.
Приклади коду IoT частини системи представлено у додатку В.1. 
5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
5.1 Виклик і завантаження


	Для запуску програми необхідно спочатку завантажити архів з програмним кодом та розпакувати його. Крім того, потрібно встановити останню версію PostgreSQL з офіційного сайту, оскільки програма використовує цю базу даних.
	Далі потрібно перейти у цей каталог «apzkr-pzpi-21-1-zhmaitsev-mykhailo/apzkr-pzpi-21-1-zhmaitsev-mykhailo/Task1-Server/API» та відкрити файл appsettings.Development.json. У цьомі файлі потрібно указати шлях з’єднання з базою даних та якщо потрібно змінити секретний ключ шифрування JWT токенів (див. рис. 5.1).
 
Рисунок 5.1 – Налаштування системи у файлі appsettings.json
	Після цього потрібно буде також відредагувати конфігураційний файл appsettings.json для IoT, який знаходиться за цим шляхом «apzkr-pzpi-21-1-zhmaitsev-mykhailo/apzkr-pzpi-21-1-zhmaitsev-mykhailo/Task2-IoT/IoT». На рисунку 5.2 ми можемо побачити приклад цього файлу, тут нам буде потрібно замінити ApiUrl на url сервера та ввести данні доктора у Credentials.
 
Рисунок 5.2 – Налаштування ІоТ-пристрою у файлі appsettings.json
	Отож, тепер ми можемо робити запуск сервера за допомогою команди «dotnet run» у цій директорії «apzkr-pzpi-21-1-zhmaitsev-mykhailo/apzkr-pzpi-21-1-zhmaitsev-mykhailo/Task1-Server/API» та запуск IoT частини за допомогою команди «dotnet run» по цьому шляху «apzkr-pzpi-21-1-zhmaitsev-mykhailo/apzkr-pzpi-21-1-zhmaitsev-mykhailo/Task2-IoT/IoT». Після запуску ми можемо користуватись нашим застосунком.


5.2 Призначення і логічна структура


	Функції, які може виконувати програма, поділяються на кілька модулів:
–	доктори;
–	рецепти;
–	ліки;
–	призначення ліків за рецептом;
–	логи видачі ліків;
–	повідомлення;
–	користувачі;
–	авторизація та реєстрація.
Модуль «Авторизація та реєстрація» включає функціонал для входу в систему та реєстрації нового облікового запису. Реєстрація дозволяє користувачу створити новий запис у базі даних, що забезпечує доступ до системи за допомогою логіну та пароля. Для входу в систему як адміністратор, необхідно створити відповідний запис у базі даних.
Модуль «Доктори» забезпечує можливість перегляду та управління профілями лікарів, включаючи їх спеціалізацію та контактну інформацію.
Модуль «Рецепти» дозволяє створювати, редагувати та переглядати медичні рецепти, які виписують лікарі для пацієнтів.
Модуль «Ліки» включає функції для управління інформацією про медичні препарати, такі як назва, опис та можливі побічні ефекти.
Модуль «Призначення ліків за рецептом» дозволяє призначати ліки пацієнтам на основі виписаних рецептів, а також контролювати процес їх прийому.
Модуль «Логи видачі ліків» забезпечує облік і моніторинг видачі ліків пацієнтам, що допомагає контролювати правильність та своєчасність їх прийому.
Модуль «Повідомлення» включає функціонал для надсилання повідомлень користувачам системи, інформуючи їх про важливі події або зміни у стані здоров'я.
Модуль «Користувачі» дозволяє адміністраторам додавати, редагувати та видаляти облікові записи користувачів, забезпечуючи контроль доступу до системи.
5.3 Опис програмної реалізації


Програмною реалізацією у моєму застосунку є веб-сторінка Swagger. Перше, що ми можем зробити – це ввести JWT токен для авторизації, щоб ідентифікувати себе як користувача (див рис 5.3).
	 
Рисунок 5.3 – Вікно для вводу JWT токену

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності Doctor, це зображено на рисунку 5.4:
 
Рисунок 5.4 – Група ендпоінтів для сутності Doctor

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності Medication, це зображено на рисунку 5.5:
 
Рисунок 5.5 – Група ендпоінтів для сутності Medication

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності Medicine, це зображено на рисунку 5.6:

 
Рисунок 5.6 – Група ендпоінтів для сутності Medicine

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності Notification, це зображено на рисунку 5.7:
 
Рисунок 5.7 – Група ендпоінтів для сутності Notification

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності Prescription, це зображено на рисунку 5.8:

 
Рисунок 5.8 – Група ендпоінтів для сутності Prescription

Далі на цій сторінці ми можемо побачити групу ендпоінтів для сутності User, це зображено на рисунку 5.9:
 
Рисунок 5.9 – Група ендпоінтів для сутності User
Фінальним етапом взаємодії з системою є репрезентація роботи з IoT частиною, що зображена на рисунку 5.10, де пацієнт проводить карточкою та сканує NFC чіп після чого отримує ліки приписані до нього:

 
Рисунок 5.10 – Репрезентація роботи IoT частини

	Таким чином, були описані можливості взаємодії користувача з розробленою програмною системою. 
ВИСНОВКИ

	У результаті виконання даної роботи була розроблена програмна система, яка спрямована на автоматизацію процесу призначення та контролю ліків для онкохворих пацієнтів.
Під час роботи було детально проаналізовано предметну область, спроектовано структуру бази даних, розроблено архітектуру серверної частини, IoT-компонентів та клієнтської частини. Система була реалізована з використанням технологій .NET Core 8 та ASP.NET Web API для серверної частини, PostgreSQL для бази даних, а також React.JS та Redux. Інтеграція з IoT-пристроями виконувалась за допомогою IoT Core MQTT та Arduino IDE.
Розроблена система надає можливість лікарям створювати та керувати рецептами, пацієнтам – переглядати призначені ліки та отримувати сповіщення щодо їх прийому. Система підтримує автоматизовану видачу ліків та моніторинг їх прийому за допомогою IoT-пристроїв, що забезпечує своєчасний прийом медикаментів і контроль за станом пацієнтів.
Адміністратори системи мають змогу керувати користувачами, налаштовувати параметри IoT-пристроїв та виконувати резервне копіювання даних. Система характеризується високою продуктивністю, надійністю та відповідає вимогам сучасного медичного програмного забезпечення, що значно підвищує ефективність лікування онкохворих пацієнтів.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Бондарєв В.М. Об'єктно-орієнтоване програмування на С #. Навчальний посібник / В. М. Бондарєв. - Харків: СМІТ, 2009р. - 221 с. (дата звернення: 25.06.2024).
2. 	ASP.NET documentation. Microsoft Learn: Build skills that open doors in your career. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0 (дата звернення: 25.06.2024)
3.	PostgreSQL 16.3 Documentation. PostgreSQL Documentation. URL:
https://www.postgresql.org/docs/16/index.html (дата звернення: 25.06.2024)
4.	React Js Documentation. URL: https://react.dev/ (дата звернення: 25.06.2024)
5.	MQTT documentation. URL: https://docs.aws.amazon.com/iot/latest/developerguide/mqtt.html (дата звернення: 25.06.2024)
 
ДОДАТОК А
Результат перевірки на плагіат

Рисунок А.1 – Результат перевірки на плагіат
 
ДОДАТОК Б
Програмний код серверної частини

	Б.1 Код файлу сервера MedicineService.cs:
1	using API.Core.Contexts;
2	using API.Core.DTOs.Medicine;
3	using API.Core.DTOs.Prescription;
4	using API.Core.Entities;
5	using API.Services.Abstractions;
6	using Microsoft.EntityFrameworkCore;
7	
8	namespace API.Services.Implementations;
9	
10	public class MedicineService(OncoBoundDbContext context) : IMedicineService
11	{
12	    public async Task<List<MedicineDto>> GetMedicinesAsync()
13	    {
14	        return await context.Medicines.Select(m => new MedicineDto
15	        {
16	            MedicineId = m.Id,
17	            Name = m.Name,
18	            Description = m.Description,
19	            SideEffects = m.SideEffects,
20	            Interactions = m.Interactions
21	        }).ToListAsync();
22	    }
23	
24	    public async Task<MedicineDto?> GetMedicineByIdAsync(int medicineId)
25	    {
26	        return await context.Medicines.Where(m => m.Id == medicineId)
27	            .Select(m => new MedicineDto
28	            {
29	                MedicineId = m.Id,
30	                Name = m.Name,
31	                Description = m.Description,
32	                SideEffects = m.SideEffects,
33	                Interactions = m.Interactions
34	            })
35	            .FirstOrDefaultAsync();
36	    }
37	
38	    public async Task<int> AddMedicineAsync(MedicineCreateDto medicineCreateDto)
39	    {
40	        var medicine = new Medicine
41	        {
42	            Name = medicineCreateDto.Name,
43	            Description = medicineCreateDto.Description,
44	            SideEffects = medicineCreateDto.SideEffects,
45	            Interactions = medicineCreateDto.Interactions
46	        };
47	        
48	        await context.Medicines.AddAsync(medicine);
49	        await context.SaveChangesAsync();
50	        return medicine.Id;
51	    }
52	
53	    public async Task<bool> UpdateMedicineAsync(int medicineId, MedicineUpdateDto updatedMedicine)
54	    {
55	        var existingMedicine = await context.Medicines.FindAsync(medicineId);
56	
57	        if (existingMedicine == null)
58	            return false;
59	
60	        existingMedicine.Name = updatedMedicine.Name;
61	        existingMedicine.Description = updatedMedicine.Description;
62	        existingMedicine.SideEffects = updatedMedicine.SideEffects;
63	        existingMedicine.Interactions = updatedMedicine.Interactions;
64	
65	        await context.SaveChangesAsync();
66	        return true;
67	    }
68	
69	    public async Task<bool> DeleteMedicineAsync(int medicineId)
70	    {
71	        var medicine = await context.Medicines.FindAsync(medicineId);
72	
73	        if (medicine == null)
74	            return false;
75	
76	        context.Medicines.Remove(medicine);
77	        await context.SaveChangesAsync();
78	        return true;
79	    }
80	
81	    public async Task<List<PrescriptedMedicineDto>> GetPrescriptedMedicines(int userId)
82	    {
83	        var currentDateUTC = DateTime.UtcNow.Date;
84	        
85	        var prescriptedMedicines = (await context.Prescriptions
86	                .Include(x => x.Medications)
87	                .Where(p => p.UserId == userId && p.DatePrescribedUTC != null)
88	                .ToListAsync())
89	            .SelectMany(p => p.Medications
90	                .Select(m => new PrescriptedMedicineDto(
91	                    p.Id,
92	                    m.MedicineId,
93	                    p.Dosage,
94	                    m.Frequency,
95	                    p.Duration,
96	                    p.DatePrescribedUTC!.Value
97	                )))
98	            .Where(dto => dto.Duration > 0 && dto.DatePrescribedUTC.AddDays(dto.Duration) >= currentDateUTC)
99	            .Where(dto => dto.Frequency > 0) // Frequency validation
100	            .ToList();
101	
102	        var resPrescripterMedicines = new List<PrescriptedMedicineDto>(prescriptedMedicines);
103	        foreach (var medicationDto in prescriptedMedicines)
104	        {
105	            var medicine = await context.Medicines.FirstOrDefaultAsync(m => m.Id == medicationDto.MedicationId);
106	            if (medicine?.ExpirationDate < DateTime.Now)
107	            {
108	                var doctorsWithMedicineAsPrescriptions = await context.Doctors.Include(d => d.Prescriptions)
109	                    .Where(d => d.Prescriptions != null).ToListAsync();
110	
111	                foreach (var doctor in doctorsWithMedicineAsPrescriptions)
112	                {
113	                    var notification = new Notification()
114	                    {
115	                        DoctorId = doctor.Id,
116	                        isRead = false,
117	                        Message = $"The medicine ${medicine.Name} with the number ${medicine.Id} has expired.",
118	                    };
119	
120	                    context.Notifications.Add(notification);
121	                }
122	            }
123	                
124	            var medicationLogsCount = context.MedicationLogs
125	                .Count(log => log.MedicationId == medicationDto.MedicationId
126	                              && log.UserId == userId
127	                              && log.TimestampUTC.Date == currentDateUTC.Date);
128	
129	            if (medicationLogsCount >= medicationDto.Frequency)
130	            {
131	                // ignore in case the medication was already taken for maximum frequency
132	                resPrescripterMedicines.Remove(medicationDto);
133	                continue;
134	            }
135	            
136	            // Log medication taken
137	            var logEntry = new MedicationLog
138	            {
139	                UserId = userId,
140	                MedicationId = medicationDto.MedicationId,
141	                TimestampUTC = DateTime.UtcNow,
142	                Status = "Taken"
143	            };
144	
145	            context.MedicationLogs.Add(logEntry);
146	        }
147	
148	        if (prescriptedMedicines.Count > 0 && resPrescripterMedicines.Count < 1)
149	        {
150	            // error in case medications was already taken for maximum frequency
151	            throw new FieldAccessException();
152	        }
153	
154	        await context.SaveChangesAsync();
155	
156	        return resPrescripterMedicines;
157	    }
158	}

	
Б.2 Код файлу сервера PasswordHelper.cs:
1	using System.Security.Cryptography;
2	using System.Text;
3	
4	namespace API.Utils;
5	
6	public static class PasswordHelper
7	{
8	    public static (string hashedPassword, string salt) HashPassword(string password)
9	    {
10	        var saltBytes = RandomNumberGenerator.GetBytes(16);
11	        var combinedBytes = Encoding.UTF8.GetBytes(password).Concat(saltBytes).ToArray();
12	        
13	        using var sha256 = SHA256.Create();
14	        var hashedBytes = sha256.ComputeHash(combinedBytes);
15	        var hashedPassword = Convert.ToBase64String(hashedBytes);
16	
17	        return (hashedPassword, Convert.ToBase64String(saltBytes));
18	    }
19	
20	    public static bool IsPasswordValid(string enteredPassword, string storedPassword, string salt)
21	    {
22	        var enteredPasswordBytes = Encoding.UTF8.GetBytes(enteredPassword);
23	        var saltBytes = Convert.FromBase64String(salt);
24	        var saltedPasswordBytes = new byte[enteredPasswordBytes.Length + saltBytes.Length];
25	        Array.Copy(enteredPasswordBytes, saltedPasswordBytes, enteredPasswordBytes.Length);
26	        Array.Copy(saltBytes, 0, saltedPasswordBytes, enteredPasswordBytes.Length, saltBytes.Length);
27	
28	        using var sha256 = SHA256.Create();
29	        var hashedBytes = sha256.ComputeHash(saltedPasswordBytes);
30	        var enteredHash = Convert.ToBase64String(hashedBytes);
31	            
32	        return string.Equals(enteredHash, storedPassword);
33	    }
34	}

	
 
ДОДАТОК В
Програмний код ІоТ пристрою
	В.1 Стартовий файл програми
1	using System.Net.Http.Headers;
2	using System.Text.Json;
3	using System.Text;
4	using IoT.Entities;
5	using Microsoft.Extensions.Configuration;
6	
7	// Без цього ми не побачимо українськи символи
8	Console.OutputEncoding = Encoding.UTF8;
9	
10	// Завантаження конфігурації з файлу appsettings.json
11	var builder = new ConfigurationBuilder();
12	builder.SetBasePath(Directory.GetCurrentDirectory())
13	    .AddJsonFile("appsettings.json", optional: false);
14	IConfiguration configBuilder = builder.Build();
15	var configuration = new Configuration();
16	configBuilder.Bind(configuration);
17	
18	Console.WriteLine("Ласкаво просимо до системи OncoBound!");
19	
20	// Аутентифікація та отримання JWT
21	using var client = new HttpClient();
22	var loginData = new
23	{
24	    email = configuration.Credentials.Email,
25	    password = configuration.Credentials.Password,
26	};
27	
28	var loginContent = new StringContent(JsonSerializer.Serialize(loginData), Encoding.UTF8, "application/json");
29	var loginResponse = await client.PostAsync($"{configuration.ApiUrl}/User/login", loginContent);
30	
31	if (!loginResponse.IsSuccessStatusCode)
32	{
33	    Console.WriteLine($"Помилка: {loginResponse.StatusCode} - Неможливо увійти.");
34	    return;
35	}
36	
37	var jwt = await loginResponse.Content.ReadAsStringAsync();
38	client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
39	
40	Console.WriteLine("Будь ласка, проведіть карткою для продовження ->>");
41	
42	var userId = Convert.ToInt32(Console.ReadLine());
43	
44	Console.WriteLine("Перевірка даних користувача");
45	for (int i = 0; i < 3; i++)
46	{
47	    Console.WriteLine("...");
48	    await Task.Delay(1000);
49	}
50	
51	try
52	{
53	    // Отримання даних користувача
54	    var userResponse = await client.GetAsync($"{configuration.ApiUrl}/User/{userId}");
55	
56	    // Перевірка чи користувача не знайдено
57	    if (!userResponse.IsSuccessStatusCode)
58	    {
59	        Console.WriteLine($"Помилка: {userResponse.StatusCode} - Неможливо знайти користувача.");
60	        return;
61	    }
62	    
63	    var userResponseBody = await userResponse.Content.ReadAsStringAsync();
64	    var user = JsonSerializer.Deserialize<User>(userResponseBody);
65	
66	    Console.WriteLine($"Привіт, {user.fullname}!");
67	
68	    Console.WriteLine("Отримання ваших призначених ліків...");
69	    for (int i = 0; i < 2; i++)
70	    {
71	        Console.WriteLine("...");
72	        await Task.Delay(1000);
73	    }
74	    
75	    var response = await client.PostAsync($"{configuration.ApiUrl}/Medicine/takeMedicines/{userId}", null);
76	    
77	    if (!response.IsSuccessStatusCode)
78	    {
79	        Console.WriteLine($"Помилка: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
80	        return;
81	    }
82	
83	    var responseBody = await response.Content.ReadAsStringAsync();
84	    var medications = JsonSerializer.Deserialize<PrescriptedMedicines>(responseBody)!.prescriptedMedicineDtos;
85	    
86	    Console.WriteLine("Ліки успішно видані:");
87	    foreach (var medication in medications)
88	    {
89	        Console.WriteLine($"Ідентифікатор рецепта: {medication.prescriptionId}");
90	        Console.WriteLine($"Ідентифікатор ліків: {medication.medicationId}");
91	        Console.WriteLine($"Дозування: {medication.dosage}");
92	        Console.WriteLine($"Частота прийому: {medication.frequency}");
93	        Console.WriteLine($"Тривалість курсу: {medication.duration}");
94	        Console.WriteLine($"Дата призначення: {medication.datePrescribedUTC}");
95	        Console.WriteLine("-------------------");
96	    }
97	    Console.WriteLine("Будьте здорові!");
98	}
99	catch (Exception ex)
100	{
101	    // Відображення будь-якої виняткової ситуації, яка може виникнути
102	    Console.WriteLine($"Виникла несподівана помилка: {ex.Message}");
103	}
